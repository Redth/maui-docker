name: 🔍 Check for Workload Updates

permissions:
  contents: read
  actions: write

on:
  schedule:
    - cron: '0 1 * * *'  # Daily at 1:00 AM UTC (before the build workflows)
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force building and pushing of all images regardless of existing tags'
        required: false
        default: false
        type: boolean

env:
  DOCKER_REPOSITORY_BASE: redth/maui-build
  DOCKER_REPOSITORY_RUNNER: redth/maui-actions-runner
  DOCKER_REPOSITORY_TEST: redth/maui-testing

jobs:
  check-updates:
    name: 🔍 Check for New Workload Set Versions
    runs-on: ubuntu-latest
    outputs:
      trigger-builds: ${{ steps.check-versions.outputs.trigger-builds }}
      new-version: ${{ steps.check-versions.outputs.new-version }}
      workload-set-version: ${{ steps.check-versions.outputs.workload-set-version }}
      dotnet-command-workload-set-version: ${{ steps.check-versions.outputs.dotnet-command-workload-set-version }}
      linux-tag: ${{ steps.check-versions.outputs.linux-tag }}
      windows-tag: ${{ steps.check-versions.outputs.windows-tag }}
      has-linux-base-build: ${{ steps.check-versions.outputs.has-linux-base-build }}
      has-windows-base-build: ${{ steps.check-versions.outputs.has-windows-base-build }}
      has-any-base-build: ${{ steps.check-versions.outputs.has-any-base-build }}
      force-build: ${{ steps.check-versions.outputs.force-build }}
    
    steps:
    - name: 🛒 Checkout
      uses: actions/checkout@v4

    - name: 🔍 Check for New Workload Set Versions
      id: check-versions
      shell: pwsh
      run: |
        if ("${{ inputs.force_build }}" -eq "true") {
          ./check-workload-updates.ps1 -DockerRepository "${{ env.DOCKER_REPOSITORY_RUNNER }}" -TestDockerRepository "${{ env.DOCKER_REPOSITORY_TEST }}" -BaseDockerRepository "${{ env.DOCKER_REPOSITORY_BASE }}" -ForceBuild
        } else {
          ./check-workload-updates.ps1 -DockerRepository "${{ env.DOCKER_REPOSITORY_RUNNER }}" -TestDockerRepository "${{ env.DOCKER_REPOSITORY_TEST }}" -BaseDockerRepository "${{ env.DOCKER_REPOSITORY_BASE }}"
        }

  trigger-build-all:
    name: 🚀 Trigger All Builds
    needs: check-updates
    if: needs.check-updates.outputs.trigger-builds == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: 🚀 Trigger Build All Workflow
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const workloadVersion = '${{ needs.check-updates.outputs.workload-set-version }}';
          
          console.log(`Triggering build-all workflow for workload set version: ${workloadVersion}`);
          
          try {
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'build-all.yml',
              ref: 'main',
              inputs: {
                workload_set_version: workloadVersion,
                force_build: '${{ needs.check-updates.outputs.force-build }}'
              }
            });
            console.log('✅ Successfully triggered build-all workflow');
          } catch (error) {
            console.log(`❌ Failed to trigger workflow: ${error.message}`);
            console.log('🔄 Trying alternative approach with repository dispatch...');
            
            // Alternative: Use repository dispatch
            await github.rest.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event_type: 'trigger-build-all',
              client_payload: {
                workload_set_version: workloadVersion,
                force_build: '${{ needs.check-updates.outputs.force-build }}'
              }
            });
            console.log('✅ Successfully sent repository dispatch event');
          }

  notify-results:
    name: 📢 Notify Results
    needs: [check-updates, trigger-build-all]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: 📢 Summary
      run: |
        echo "## Workload Update Check Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Latest workload set version:** ${{ needs.check-updates.outputs.workload-set-version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Dotnet command version:** ${{ needs.check-updates.outputs.dotnet-command-workload-set-version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Expected Linux tag:** ${{ needs.check-updates.outputs.linux-tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Expected Windows tag:** ${{ needs.check-updates.outputs.windows-tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **New version found:** ${{ needs.check-updates.outputs.new-version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Builds triggered:** ${{ needs.check-updates.outputs.trigger-builds }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Force build:** ${{ needs.check-updates.outputs.force-build }}" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.check-updates.outputs.trigger-builds }}" == "true" ]]; then
          echo "- **Build trigger status:** ${{ needs.trigger-build-all.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.check-updates.outputs.force-build }}" == "true" ]]; then
            echo "🔄 Force build triggered!" >> $GITHUB_STEP_SUMMARY
            echo "   - All images will be rebuilt regardless of existing tags" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ New workload set version detected!" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "   - Combined build workflow triggered with proper dependency order:" >> $GITHUB_STEP_SUMMARY
          echo "     1. Base images (Linux + Windows)" >> $GITHUB_STEP_SUMMARY
          echo "     2. Runner images (depends on base)" >> $GITHUB_STEP_SUMMARY
          echo "     3. Test images (depends on base)" >> $GITHUB_STEP_SUMMARY
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ℹ️ No new workload set version found. All builds are up to date." >> $GITHUB_STEP_SUMMARY
        fi
