name: 🐋 Build Docker Test Image

on:
  workflow_dispatch:
    inputs:
      workload_set_version:
        description: 'Specific workload set version to use'
        required: false
        type: string
      dotnet_versions:
        description: 'JSON array of .NET versions to build (e.g., ["9.0", "10.0"])'
        required: false
        type: string
        default: '["9.0"]'
      android_api_levels:
        description: 'JSON array of Android API levels to build (e.g., [34, 35])'
        required: false
        type: string
        default: '[23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35]'
      appium_version:
        description: 'Specific Appium version to use (defaults to latest from npm)'
        required: false
        type: string
      appium_uiautomator2_driver_version:
        description: 'Specific Appium UIAutomator2 driver version to use (defaults to latest from npm)'
        required: false
        type: string

env:
  DOCKER_REPOSITORY: redth/maui-testing

jobs:
  get-workload-info:
    name: 🔍 Get Workload Information
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.determine-matrix.outputs.matrix }}
      workload-api-levels: ${{ steps.get-workload-info.outputs.workload-api-levels }}
    
    steps:
    - name: 🛒 Checkout
      uses: actions/checkout@v4
    
    - name: 🔍 Get Workload Information
      id: get-workload-info
      shell: pwsh
      run: |
        # Import common functions
        . ./common-functions.ps1
        
        # Define .NET versions to check
        $dotnetVersions = if ("${{ inputs.dotnet_versions }}" -ne "") {
          '${{ inputs.dotnet_versions }}' | ConvertFrom-Json
        } else {
          @("9.0", "10.0")
        }
        $workloadApiLevels = @{}
        
        foreach ($dotnetVersion in $dotnetVersions) {
          Write-Host "Getting workload information for .NET $dotnetVersion"
          $workloadInfo = Get-WorkloadInfo -DotnetVersion $dotnetVersion -WorkloadSetVersion "${{ inputs.workload_set_version }}" -IncludeAndroid -DockerPlatform "linux/amd64"
          
          if ($workloadInfo -and $workloadInfo.Workloads["Microsoft.NET.Sdk.Android"] -and $workloadInfo.Workloads["Microsoft.NET.Sdk.Android"].Details) {
            $workloadApiLevel = $workloadInfo.Workloads["Microsoft.NET.Sdk.Android"].Details.ApiLevel
            $workloadApiLevels[$dotnetVersion] = $workloadApiLevel
            Write-Host "Workload for .NET $dotnetVersion requires API Level: $workloadApiLevel"
          } else {
            Write-Warning "Could not get workload API level for .NET $dotnetVersion, using default"
            $workloadApiLevels[$dotnetVersion] = 35
          }
        }
        
        # Output the workload API levels as JSON
        $workloadApiLevelsJson = $workloadApiLevels | ConvertTo-Json -Compress
        echo "workload-api-levels=$workloadApiLevelsJson" >> $env:GITHUB_OUTPUT
    
    - name: 🎯 Determine Build Matrix
      id: determine-matrix
      shell: pwsh
      run: |
        # Parse workload API levels
        $workloadApiLevels = '${{ steps.get-workload-info.outputs.workload-api-levels }}' | ConvertFrom-Json
        
        # Define .NET versions to use
        $dotnetVersions = if ("${{ inputs.dotnet_versions }}" -ne "") {
          '${{ inputs.dotnet_versions }}' | ConvertFrom-Json
        } else {
          @("9.0", "10.0")
        }
        
        # Define API levels to use
        $apiLevels = if ("${{ inputs.android_api_levels }}" -ne "") {
          '${{ inputs.android_api_levels }}' | ConvertFrom-Json
        } else {
          @(23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35)
        }
        
        # Add workload-required API levels if not already in the list
        foreach ($dotnetVersion in $workloadApiLevels.PSObject.Properties.Name) {
          $workloadApiLevel = $workloadApiLevels.$dotnetVersion
          if ($workloadApiLevel -notin $apiLevels) {
            $apiLevels += $workloadApiLevel
            Write-Host "Added workload-required API level $workloadApiLevel for .NET $dotnetVersion"
          }
        }
        
        # Sort API levels for consistent output
        $apiLevels = $apiLevels | Sort-Object
        
        Write-Host "Using .NET versions: $($dotnetVersions -join ', ')"
        Write-Host "Using API levels: $($apiLevels -join ', ')"
        
        # Create matrix combinations
        $matrix = @()
        foreach ($dotnetVersion in $dotnetVersions) {
          foreach ($apiLevel in $apiLevels) {
            $matrix += @{
              dotnet_version = $dotnetVersion
              android_api_level = $apiLevel
            }
          }
        }
        
        # Convert to JSON format for GitHub Actions
        $matrixJson = @{ include = $matrix } | ConvertTo-Json -Compress -Depth 3
        Write-Host "Matrix: $matrixJson"
        echo "matrix=$matrixJson" >> $env:GITHUB_OUTPUT

  determine-matrix:
    runs-on: ubuntu-latest
    needs: get-workload-info
    outputs:
      matrix: ${{ needs.get-workload-info.outputs.matrix }}
    steps:
      - name: 📋 Pass Through Matrix
        run: |
          echo "Using matrix: ${{ needs.get-workload-info.outputs.matrix }}"

  build:
    needs: [get-workload-info, determine-matrix]
    name: 🐋 Build Linux Test Image (.NET ${{ matrix.dotnet_version }}, API ${{ matrix.android_api_level }})
    runs-on: ubuntu-latest

    strategy:
      matrix: ${{ fromJson(needs.determine-matrix.outputs.matrix) }}

    steps:
    - name: 🛒 Checkout
      uses: actions/checkout@v3

    - name: 🐋 DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 🔨 Build Docker Image
      shell: pwsh
      working-directory: ./test/
      run: |
        # Only push images on main branch
        $Push = $false
        if ("${{ github.ref }}" -eq "refs/heads/main") {
          $Push = $true
        }
        
        # Build arguments
        $buildArgs = @(
          "-AndroidSdkApiLevel", "${{ matrix.android_api_level }}"
          "-DockerRepository", "${{ env.DOCKER_REPOSITORY }}"
          "-Version", "${{ github.run_id }}"
          "-Load", $true
          "-Push", $Push
        )
        
        # Add workload set version if specified
        if ("${{ inputs.workload_set_version }}" -ne "") {
          $buildArgs += "-WorkloadSetVersion", "${{ inputs.workload_set_version }}"
        }
        
        # Add .NET version from matrix
        $buildArgs += "-DotnetVersion", "${{ matrix.dotnet_version }}"
        
        # Add Appium versions if specified
        if ("${{ inputs.appium_version }}" -ne "") {
          $buildArgs += "-AppiumVersion", "${{ inputs.appium_version }}"
        }
        
        if ("${{ inputs.appium_uiautomator2_driver_version }}" -ne "") {
          $buildArgs += "-AppiumUIAutomator2DriverVersion", "${{ inputs.appium_uiautomator2_driver_version }}"
        }
        
        ./build.ps1 @buildArgs


