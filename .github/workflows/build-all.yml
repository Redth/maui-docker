name: üêã Build All Docker Images

on:
  workflow_dispatch:
    inputs:
      workload_set_version:
        description: 'Specific workload set version to use'
        required: false
        type: string
      dotnet_versions:
        description: 'JSON array of .NET versions to build (e.g., ["9.0", "10.0"])'
        required: false
        type: string
        default: '["9.0"]'
      android_api_levels:
        description: 'JSON array of Android API levels to build (e.g., [34, 35])'
        required: false
        type: string
        default: '[23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35]'
      force_build:
        description: 'Force building and pushing of all images regardless of existing tags'
        required: false
        default: false
        type: boolean
      appium_version:
        description: 'Specific Appium version to use (defaults to latest from npm)'
        required: false
        type: string
      appium_uiautomator2_driver_version:
        description: 'Specific Appium UIAutomator2 driver version to use (defaults to latest from npm)'
        required: false
        type: string
  repository_dispatch:
    types: [trigger-build-all]

env:
  DOCKER_REPOSITORY_BASE: redth/maui-build
  DOCKER_REPOSITORY_RUNNER: redth/maui-actions-runner
  DOCKER_REPOSITORY_TEST: redth/maui-testing

jobs:
  # Step 1: Build Base Images (Linux and Windows)
  build-base-linux:
    name: üêã Build Linux Base (.NET ${{ matrix.DOTNET_VERSION }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        DOTNET_VERSION: [ "9.0" ]
    
    steps:
    - name: üõí Checkout
      uses: actions/checkout@v4

    - name: üîß Set Variables
      id: vars
      run: |
        # Determine workload set version from either workflow_dispatch input or repository_dispatch payload
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          WORKLOAD_SET_VERSION="${{ github.event.client_payload.workload_set_version }}"
        else
          WORKLOAD_SET_VERSION="${{ inputs.workload_set_version }}"
        fi
        echo "workload_set_version=$WORKLOAD_SET_VERSION" >> $GITHUB_OUTPUT
        echo "Using workload set version: $WORKLOAD_SET_VERSION"

    - name: üêã Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: üîß Build Base Image
      shell: pwsh
      run: |
        $buildArgs = @{
          DotNetVersion     = "${{ matrix.DOTNET_VERSION }}"
          DockerRepository  = "${{ env.DOCKER_REPOSITORY_BASE }}"
          DockerPlatform    = "linux/amd64"
          Version           = "latest"
          Push              = $true
        }
        
        # Add workload set version if specified
        if ("${{ steps.vars.outputs.workload_set_version }}" -ne "") {
          $buildArgs.WorkloadSetVersion = "${{ steps.vars.outputs.workload_set_version }}"
        }
        
        ./base/base-build.ps1 @buildArgs

  build-base-windows:
    name: üêã Build Windows Base (.NET ${{ matrix.DOTNET_VERSION }})
    runs-on: windows-latest
    strategy:
      matrix:
        DOTNET_VERSION: [ "9.0" ]
    
    steps:
    - name: üõí Checkout
      uses: actions/checkout@v4

    - name: üîß Set Variables
      id: vars
      shell: bash
      run: |
        # Determine workload set version from either workflow_dispatch input or repository_dispatch payload
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          WORKLOAD_SET_VERSION="${{ github.event.client_payload.workload_set_version }}"
        else
          WORKLOAD_SET_VERSION="${{ inputs.workload_set_version }}"
        fi
        echo "workload_set_version=$WORKLOAD_SET_VERSION" >> $GITHUB_OUTPUT
        echo "Using workload set version: $WORKLOAD_SET_VERSION"

    - name: üêã Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: üîß Build Base Image
      shell: pwsh
      run: |
        $buildArgs = @{
          DotNetVersion     = "${{ matrix.DOTNET_VERSION }}"
          DockerRepository  = "${{ env.DOCKER_REPOSITORY_BASE }}"
          DockerPlatform    = "windows/amd64"
          Version           = "latest"
          Push              = $true
        }
        
        # Add workload set version if specified
        if ("${{ steps.vars.outputs.workload_set_version }}" -ne "") {
          $buildArgs.WorkloadSetVersion = "${{ steps.vars.outputs.workload_set_version }}"
        }
        
        ./base/base-build.ps1 @buildArgs

  # Step 2: Build Runner Images (depends on base images)
  build-runner-windows:
    name: üêã Build Windows Runner (.NET ${{ matrix.DOTNET_VERSION }})
    runs-on: windows-latest
    needs: build-base-windows
    strategy:
      matrix:
        DOTNET_VERSION: [ "9.0" ]
    
    steps:
    - name: üõí Checkout
      uses: actions/checkout@v4

    - name: üîß Set Variables
      id: vars
      shell: bash
      run: |
        # Determine workload set version from either workflow_dispatch input or repository_dispatch payload
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          WORKLOAD_SET_VERSION="${{ github.event.client_payload.workload_set_version }}"
        else
          WORKLOAD_SET_VERSION="${{ inputs.workload_set_version }}"
        fi
        echo "workload_set_version=$WORKLOAD_SET_VERSION" >> $GITHUB_OUTPUT
        echo "Using workload set version: $WORKLOAD_SET_VERSION"

    - name: üêã Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: üîß Build Runner Image  
      shell: pwsh
      run: |
        $buildArgs = @{
          DotNetVersion     = "${{ matrix.DOTNET_VERSION }}"
          DockerRepository  = "${{ env.DOCKER_REPOSITORY_RUNNER }}"
          DockerPlatform    = "windows/amd64"
          BaseDockerRepository = "${{ env.DOCKER_REPOSITORY_BASE }}"
          Version           = "latest"
          Push              = $true
        }
        
        # Add workload set version if specified
        if ("${{ steps.vars.outputs.workload_set_version }}" -ne "") {
          $buildArgs.WorkloadSetVersion = "${{ steps.vars.outputs.workload_set_version }}"
        }
        
        ./runner/runner-build.ps1 @buildArgs

  build-runner-linux:
    name: üêã Build Linux Runner (.NET ${{ matrix.DOTNET_VERSION }})
    runs-on: ubuntu-latest
    needs: build-base-linux
    strategy:
      matrix:
        DOTNET_VERSION: [ "9.0" ]
    
    steps:
    - name: üõí Checkout
      uses: actions/checkout@v4

    - name: üîß Set Variables
      id: vars
      run: |
        # Determine workload set version from either workflow_dispatch input or repository_dispatch payload
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          WORKLOAD_SET_VERSION="${{ github.event.client_payload.workload_set_version }}"
        else
          WORKLOAD_SET_VERSION="${{ inputs.workload_set_version }}"
        fi
        echo "workload_set_version=$WORKLOAD_SET_VERSION" >> $GITHUB_OUTPUT
        echo "Using workload set version: $WORKLOAD_SET_VERSION"

    - name: üêã Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: üîß Build Runner Image
      shell: pwsh
      run: |
        $buildArgs = @{
          DotNetVersion     = "${{ matrix.DOTNET_VERSION }}"
          DockerRepository  = "${{ env.DOCKER_REPOSITORY_RUNNER }}"
          DockerPlatform    = "linux/amd64"
          BaseDockerRepository = "${{ env.DOCKER_REPOSITORY_BASE }}"
          Version           = "latest"
          Push              = $true
        }
        
        # Add workload set version if specified
        if ("${{ steps.vars.outputs.workload_set_version }}" -ne "") {
          $buildArgs.WorkloadSetVersion = "${{ steps.vars.outputs.workload_set_version }}"
        }
        
        ./runner/runner-build.ps1 @buildArgs

  # Step 3: Get workload info for test builds
  get-workload-info:
    name: üîç Get Workload Information
    runs-on: ubuntu-latest
    needs: build-base-linux
    outputs:
      matrix: ${{ steps.determine-matrix.outputs.matrix }}
      workload-api-levels: ${{ steps.get-workload-info.outputs.workload-api-levels }}
      workload-set-version: ${{ steps.vars.outputs.workload_set_version }}
    
    steps:
    - name: üõí Checkout
      uses: actions/checkout@v4

    - name: üîß Set Variables
      id: vars
      run: |
        # Determine workload set version from either workflow_dispatch input or repository_dispatch payload
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          WORKLOAD_SET_VERSION="${{ github.event.client_payload.workload_set_version }}"
        else
          WORKLOAD_SET_VERSION="${{ inputs.workload_set_version }}"
        fi
        echo "workload_set_version=$WORKLOAD_SET_VERSION" >> $GITHUB_OUTPUT
        echo "Using workload set version: $WORKLOAD_SET_VERSION"
    
    - name: üîç Get Workload Information
      id: get-workload-info
      shell: pwsh
      run: |
        # Import common functions
        . ./common-functions.ps1
        
        # Define .NET versions to check
        $dotnetVersionsInput = '${{ inputs.dotnet_versions }}'
        $dotnetVersions = if ($dotnetVersionsInput -ne "") {
          $dotnetVersionsInput | ConvertFrom-Json
        } else {
          @("9.0")
        }
        $workloadApiLevels = @{}
        
        foreach ($dotnetVersion in $dotnetVersions) {
          Write-Host "Getting workload information for .NET $dotnetVersion"
          $workloadInfo = Get-WorkloadInfo -DotnetVersion $dotnetVersion -WorkloadSetVersion "${{ steps.vars.outputs.workload_set_version }}" -IncludeAndroid -DockerPlatform "linux/amd64"
          
          if ($workloadInfo -and $workloadInfo.Workloads["Microsoft.NET.Sdk.Android"] -and $workloadInfo.Workloads["Microsoft.NET.Sdk.Android"].Details) {
            $workloadApiLevel = $workloadInfo.Workloads["Microsoft.NET.Sdk.Android"].Details.ApiLevel
            $workloadApiLevels[$dotnetVersion] = $workloadApiLevel
            Write-Host "Workload for .NET $dotnetVersion requires API Level: $workloadApiLevel"
          } else {
            Write-Warning "Could not get workload API level for .NET $dotnetVersion, using default"
            $workloadApiLevels[$dotnetVersion] = 35
          }
        }
        
        # Output the workload API levels as JSON
        $workloadApiLevelsJson = $workloadApiLevels | ConvertTo-Json -Compress
        echo "workload-api-levels=$workloadApiLevelsJson" >> $env:GITHUB_OUTPUT
    
    - name: üéØ Determine Build Matrix
      id: determine-matrix
      shell: pwsh
      run: |
        # Parse workload API levels
        $workloadApiLevels = '${{ steps.get-workload-info.outputs.workload-api-levels }}' | ConvertFrom-Json
        
        # Define .NET versions to use
        $dotnetVersionsInput = '${{ inputs.dotnet_versions }}'
        $dotnetVersions = if ($dotnetVersionsInput -ne "") {
          $dotnetVersionsInput | ConvertFrom-Json
        } else {
          @("9.0")
        }
        
        # Define API levels to use
        $apiLevelsInput = '${{ inputs.android_api_levels }}'
        $apiLevels = if ($apiLevelsInput -ne "") {
          $apiLevelsInput | ConvertFrom-Json
        } else {
          @(23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35)
        }
        
        # Add workload-required API levels if not already in the list
        foreach ($dotnetVersion in $workloadApiLevels.PSObject.Properties.Name) {
          $workloadApiLevel = $workloadApiLevels.$dotnetVersion
          if ($workloadApiLevel -notin $apiLevels) {
            $apiLevels += $workloadApiLevel
            Write-Host "Added workload-required API level $workloadApiLevel for .NET $dotnetVersion"
          }
        }
        
        # Sort API levels for consistent output
        $apiLevels = $apiLevels | Sort-Object
        
        Write-Host "Using .NET versions: $($dotnetVersions -join ', ')"
        Write-Host "Using API levels: $($apiLevels -join ', ')"
        
        # Create matrix combinations
        $matrix = @()
        foreach ($dotnetVersion in $dotnetVersions) {
          foreach ($apiLevel in $apiLevels) {
            $matrix += @{
              dotnet_version = $dotnetVersion
              android_api_level = $apiLevel
            }
          }
        }
        
        # Convert to JSON format for GitHub Actions
        $matrixJson = @{ include = $matrix } | ConvertTo-Json -Compress -Depth 3
        Write-Host "Matrix: $matrixJson"
        echo "matrix=$matrixJson" >> $env:GITHUB_OUTPUT

  # Step 4: Build Test Images (depends on base images)
  build-test-linux:
    name: üêã Build Linux Test Image (.NET ${{ matrix.dotnet_version }}, API ${{ matrix.android_api_level }})
    runs-on: ubuntu-latest
    needs: [build-base-linux, get-workload-info]
    strategy:
      matrix: ${{ fromJson(needs.get-workload-info.outputs.matrix) }}
      fail-fast: false
    
    steps:
    - name: üõí Checkout
      uses: actions/checkout@v4

    - name: üêã Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: üîß Build Test Image
      shell: pwsh
      run: |
        $buildArgs = @{
          DotnetVersion = "${{ matrix.dotnet_version }}"
          DockerRepository = "${{ env.DOCKER_REPOSITORY_TEST }}"
          BaseDockerRepository = "${{ env.DOCKER_REPOSITORY_BASE }}"
          DockerPlatform = "linux/amd64"
          AndroidApiLevel = "${{ matrix.android_api_level }}"
          Push = $true
        }
        
        # Add workload set version if specified
        if ("${{ needs.get-workload-info.outputs.workload-set-version }}" -ne "") {
          $buildArgs.WorkloadSetVersion = "${{ needs.get-workload-info.outputs.workload-set-version }}"
        }
        
        # Add Appium versions if specified
        if ("${{ inputs.appium_version }}" -ne "") {
          $buildArgs.AppiumVersion = "${{ inputs.appium_version }}"
        }
        
        if ("${{ inputs.appium_uiautomator2_driver_version }}" -ne "") {
          $buildArgs.AppiumUIAutomator2DriverVersion = "${{ inputs.appium_uiautomator2_driver_version }}"
        }
        
        ./test/build.ps1 @buildArgs

  # Step 5: Summary
  build-summary:
    name: üìã Build Summary
    runs-on: ubuntu-latest
    needs: [build-base-linux, build-base-windows, build-runner-linux, build-runner-windows, build-test-linux]
    if: always()
    
    steps:
    - name: üìã Generate Summary
      run: |
        echo "## Build Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Base Images" >> $GITHUB_STEP_SUMMARY
        echo "- **Linux Base:** ${{ needs.build-base-linux.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Windows Base:** ${{ needs.build-base-windows.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Runner Images" >> $GITHUB_STEP_SUMMARY
        echo "- **Linux Runner:** ${{ needs.build-runner-linux.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Windows Runner:** ${{ needs.build-runner-windows.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Images" >> $GITHUB_STEP_SUMMARY
        echo "- **Linux Test:** ${{ needs.build-test-linux.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Count successful builds
        total_builds=5
        successful_builds=0
        
        [[ "${{ needs.build-base-linux.result }}" == "success" ]] && ((successful_builds++))
        [[ "${{ needs.build-base-windows.result }}" == "success" ]] && ((successful_builds++))
        [[ "${{ needs.build-runner-linux.result }}" == "success" ]] && ((successful_builds++))
        [[ "${{ needs.build-runner-windows.result }}" == "success" ]] && ((successful_builds++))
        [[ "${{ needs.build-test-linux.result }}" == "success" ]] && ((successful_builds++))
        
        echo "**Overall Status:** $successful_builds/$total_builds builds successful" >> $GITHUB_STEP_SUMMARY
        
        if [ $successful_builds -eq $total_builds ]; then
          echo "‚úÖ All builds completed successfully!" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è Some builds failed. Please check the individual job logs." >> $GITHUB_STEP_SUMMARY
        fi
